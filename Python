{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNEHNotHbqjC5kgS6VS1BVy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chandanesh5/MAYAKUNTLA-CHANDANESH/blob/main/Python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "String method"
      ],
      "metadata": {
        "id": "hP_5MRhprJaM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name =input(\"enter your name :\")\n",
        "if name== \"Anantha prasad\":\n",
        "  print(f\"{name} :It's my bro name\")\n",
        "if name==\"Chandanesh\":\n",
        "    print(f\"{name} :It's my name\")\n",
        "else :\n",
        "    print(f\"{name} :It's my friend name\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b_uIYgd7rIg0",
        "outputId": "3751639a-4f35-406c-8216-d2b246f6c9a2"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter your name :Anantha prasad\n",
            "Anantha prasad :It's my bro name\n",
            "Anantha prasad :It's my friend name\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name =input(\"enter your name :\")\n",
        "if name== \"Anantha prasad\":\n",
        "  print(f\"{name} :It's my bro name\")\n",
        "  if name==\"Chandanesh\":\n",
        "    print(f\"{name} :It's my name\")\n",
        "else :\n",
        "    print(f\"{name} :It's my friend name\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pqWa5LcjrIUJ",
        "outputId": "937b12b1-d83d-4c63-ac2e-f7c89672cf80"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter your name :Chandanesh\n",
            "Chandanesh :It's my friend name\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name =input(\"enter your name :\")\n",
        "if name== \"Anantha prasad\":\n",
        "  print(f\"{name} :It's my bro name\")\n",
        "  if name==\"chandanesh\":\n",
        "    print(f\"{name} :It's my name\")\n",
        "else :\n",
        "    print(f\"{name} :It's my friend name\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "El54uRa2rSgU",
        "outputId": "d39ae3d4-4729-46e0-9393-91ddd8a8c226"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter your name :Vijay\n",
            "Vijay :It's my friend name\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**String Indexing**\n",
        "\n"
      ],
      "metadata": {
        "id": "Uut4j6Jnd30N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "place=\"Dharmavaram\"\n",
        "place[2]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "0plPulNxdtDX",
        "outputId": "55fea8de-4155-4317-994e-0d42a6d54646"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'a'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "place=\"Dharmavaram\"\n",
        "place[-5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "3wfF6DTJszQm",
        "outputId": "3ff15c6f-0cf0-4a9d-9e29-5c9428ac6e44"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'v'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name= \"anantha Prasad\"\n",
        "print(f\"{name}\")\n",
        "print(f\" Indexing :8= {name[8]}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U1U6GLXCeUBY",
        "outputId": "486271b2-5ad0-41bb-808b-9b5c118147be"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "anantha Prasad\n",
            " Indexing :8= P\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "String Length"
      ],
      "metadata": {
        "id": "SvmXxPxfkG25"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "host2=\"neehanaz Jntua\"\n",
        "len(host2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OZGVB-DQj7f9",
        "outputId": "1c26c4c8-0d8a-4297-8250-5b8f74089e06"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "host=\"bavaji Jntua\"\n",
        "len(host)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-zEAglfxkFSc",
        "outputId": "8a0a5c75-1ce0-4527-fb2f-73761b53e6fd"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "12"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "host=\"bavaji Jntua\"\n",
        "host2=\"neehanaz Jntua\"\n",
        "if len(host[4:10])==len(host2[5:11]): \n",
        "  print(\"Its both  length are same \")\n",
        "else:\n",
        "  print(\"Its both length are diiferent\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vslFLRaZiide",
        "outputId": "82570557-f2a9-4e2f-fd59-21c5eb55ffb4"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Its both  length are same \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Strings mutability**"
      ],
      "metadata": {
        "id": "3TDzA-eAkWFS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"Pani\"\n",
        "Name=name.replace(\"P\",\"M\")\n",
        "print(Name)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xMSe6sjEkWvX",
        "outputId": "3821142c-f2b3-4a49-e4e5-1769ad52322c"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mani\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Name=name.replace(\"P\",\"M\")\n",
        "print(f\"Nick_Name is :{Name}\")\n",
        "print(f\"Full_name is :{Name.replace('Mani','Manikanta')}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "20EEblFglMT0",
        "outputId": "c4469489-7524-4dcb-8701-06b31aa48f9f"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nick_Name is :Mani\n",
            "Full_name is :Manikanta\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**String slicing**"
      ],
      "metadata": {
        "id": "sUvNhYHTn1Fy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"Anantha prasad\"\n",
        "name[::2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "1HnqWr4PoBiI",
        "outputId": "1de05700-7081-4efb-e222-ada3594ce703"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Aatapaa'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"Anantha prasad\"\n",
        "name[::-3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "g4XHVdnsoYcF",
        "outputId": "f606f212-9dad-41cc-b4fc-4bb0455ff691"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'da tn'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"Anantha prasad\"\n",
        "name[4:10:4]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "Azl0sA0Eoi4c",
        "outputId": "6d366651-e986-4b8d-d573-40e1076374aa"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'tp'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c1=\"MALAYALAM\"\n",
        "c2=c1[::-1]\n",
        "\n",
        "if c2==c1:\n",
        "  print(\"It is Palindromic Word's\")\n",
        "else:\n",
        "  print(\"It not a Palindromic Word's\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Ajw-ou4or02",
        "outputId": "81122bba-4f60-4fec-c729-8ad2d5ee687d"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "It is Palindromic Word's\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Other string methods\n",
        "s.no|String method\n",
        "-|-|\n",
        "1| upper case method\n",
        "2| lower case method\n",
        "3| title case method\n",
        "4| capitalize case method\n",
        "5| swapcase  method\n"
      ],
      "metadata": {
        "id": "4ialHC-ntmAl"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "btJoPLhtclFF",
        "outputId": "276f9229-1ccf-450a-e901-537c036b2ed1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "name in upper case: CHANDANESH MAYAKUNTLA\n",
            "name in lower case: chandanesh mayakuntla\n",
            "name in title case: Chandanesh Mayakuntla\n",
            "name in capitalize case: Chandanesh mayakuntla\n",
            "name in swap case: ChAnDANeSH mAyaKuNtlA\n"
          ]
        }
      ],
      "source": [
        "name=\"cHaNdanEsh MaYAkUnTLa\"\n",
        "print(f\"name in upper case: {name.upper()}\") #upper case converting\n",
        "print(f\"name in lower case: {name.lower()}\") #Lower case converting\n",
        "print(f\"name in title case: {name.title()}\") #Title case converting\n",
        "print(f\"name in capitalize case: {name.capitalize()}\") #Capitalize case converting\n",
        "print(f\"name in swap case: {name.swapcase()}\") #Swap case converting"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Brand=\"AmErIcAn ExPrEsS\"\n",
        "print(f\"Brand in upper case: {Brand.upper()}\") #upper case converting\n",
        "print(f\"Brand in lower case: {Brand.lower()}\") #Lower case converting\n",
        "print(f\"Brand in title case: {Brand.title()}\") #Title case converting\n",
        "print(f\"Brand in capitalize case: {Brand.capitalize()}\") #Capitalize case converting\n",
        "print(f\"Brand in swap case: {Brand.swapcase()}\") #Swap case converting"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GS2ND7Equ302",
        "outputId": "421f41f9-8064-426b-a666-6f02b1b020f2"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Brand in upper case: AMERICAN EXPRESS\n",
            "Brand in lower case: american express\n",
            "Brand in title case: American Express\n",
            "Brand in capitalize case: American express\n",
            "Brand in swap case: aMeRiCaN eXpReSs\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "place=\"Dharmavaram\"\n",
        "\"*\".join(place)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "Pew0ARlOzxBJ",
        "outputId": "ecc3ce67-44af-4f57-f454-4984524989b6"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'D*h*a*r*m*a*v*a*r*a*m'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "place=\"Dharmavaram\"\n",
        "\"_\".join(place)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "tlukd40Hz_Rb",
        "outputId": "eb6eab35-3262-4a8b-f2b4-1df116505f35"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'D_h_a_r_m_a_v_a_r_a_m'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "place=\"Dharmavaram\"\n",
        "\" @ \".join(place)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "ZpyaGoskz_Gr",
        "outputId": "6f2eb0d9-f5f3-4cf3-8018-bfeb75f37766"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'D @ h @ a @ r @ m @ a @ v @ a @ r @ a @ m'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "place=\"Dharmavaram\"\n",
        "\"|\".join(place)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "k8eXtGEj0JnF",
        "outputId": "0dc1ab73-8547-4dd5-850e-3df5c66642b6"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'D|h|a|r|m|a|v|a|r|a|m'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "place=\"Dharmavaram\"\n",
        "\"\".join(reversed(place))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "m4vu6KgO0Jam",
        "outputId": "16111def-6370-4036-8aad-3287872a0b81"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'maravamrahD'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "quotes=\"  Captions should add new information.  \"\n",
        "quotes.strip(\" \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "YR8lxeN31JSC",
        "outputId": "53097e1e-e22d-4b0f-c236-4f59e004652e"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Captions should add new information.'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Strip"
      ],
      "metadata": {
        "id": "0OHQAxSg4KTH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name=\" Anantha prasad  \"\n",
        "name.strip(\" \") #Remove extra spaces front and back of the string"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "-SMAoiu116uX",
        "outputId": "cc3ec393-e5a8-4f73-f106-6c3618975ea1"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Anantha prasad'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\" Vijay  \"\n",
        "name.lstrip(\" \") #Remove extra spaces front  of the string"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "L_dldJAi2Z8S",
        "outputId": "b572998a-bc1e-49e8-a499-d5634bced9c6"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Vijay  '"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"  Viswa  \"\n",
        "name.rstrip(\"  \") #Remove extra spaces back of the string"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "npWa7b7C2ZtI",
        "outputId": "0709aff7-6a0b-476a-fa1f-ddd66eeacc96"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'  Viswa'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\" Vijay Kanth \"\n",
        "name.replace (\" \",\"\") # Remove extra between the two words"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "Kuo4QJLV429N",
        "outputId": "cfd56f51-6ac9-4234-b135-ac494e6fd85e"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'VijayKanth'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "quotes=\" ===Captions should add new information.===  \"\n",
        "quotes.strip(\" = \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "NlnpkTc15Lcb",
        "outputId": "4407dddb-04bc-4325-f2ac-c30f01dbe9d6"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Captions should add new information.'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "quotes=\" ===Captions should add new information.===  \"\n",
        "quotes.lstrip(\" = \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "SbfBmVJL5LOx",
        "outputId": "3d6f8314-8855-4b38-de4e-790f67f2533d"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Captions should add new information.===  '"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "quotes=\" ===Captions should add new information.===  \"\n",
        "quotes.rstrip(\" = \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "YzIcD-T25jEU",
        "outputId": "1d80e76b-f387-4019-b680-2b26303d1571"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "' ===Captions should add new information.'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Formatting"
      ],
      "metadata": {
        "id": "oKUvvO2l6LcO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"Vijay\"\n",
        "name.center(20,\"#\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "KO8rQnw555jm",
        "outputId": "c80c5b7e-7ff8-498e-9163-158c0b9c5d5d"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'#######Vijay########'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"Vijay\"\n",
        "name.center(10,\"#\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "WFLbiFGk55W4",
        "outputId": "2ed68c7b-d211-46af-ffdb-034020fa9509"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'##Vijay###'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "quotes=\"Captions should add new information\"\n",
        "quotes.center(50,\"*\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "no3peRBd7C8s",
        "outputId": "cdc1f0e7-aaaa-496b-d713-fddb2244b56d"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'*******Captions should add new information********'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Checking string cases"
      ],
      "metadata": {
        "id": "nKWmfdDF64tN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**checking the spaces**"
      ],
      "metadata": {
        "id": "tu7zFFECD_Vo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "quotes=\"Captions should add new information\"\n",
        "quotes.isspace()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wy2BJvPwDB7j",
        "outputId": "6d873ade-791f-47c9-ac91-3400b156248d"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sample=\"  \"\n",
        "sample.isspace()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wIg7cQsQD4Ok",
        "outputId": "acd3d60a-f085-407a-e03d-a588e5c66e45"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sample=\"\"\n",
        "sample.isspace()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3erbAm2_DtWU",
        "outputId": "e7f5ae99-e8ce-4ab8-d9be-e7001e9aa89f"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Checking string cases**"
      ],
      "metadata": {
        "id": "9bS7SWodELsc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"CHANDANESH\"\n",
        "name.isupper()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yGJDAo056qUE",
        "outputId": "73b75a2d-73fc-4f53-a415-1decddae66ec"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"anand\"\n",
        "name.isupper()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2z-y1yvVBFRK",
        "outputId": "477761b1-e454-4673-b840-e51533210507"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"Anantha\"\n",
        "name.isupper()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XTM1L83A7vHo",
        "outputId": "010511bb-5589-48a4-9ef1-af89a07528ac"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"manjula\"\n",
        "name.islower()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eFLTI0kKA6rz",
        "outputId": "d6fcab30-0f86-422e-dd8b-68408c41f8a9"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"CHANDANESH\"\n",
        "print(f\"Before change into lower case :{name}\")\n",
        "name=name.lower() # changing  upper into lower case\n",
        "print(f\"After change into lower case :{name}\")\n",
        "checking_results =name.islower()\n",
        "print(f\"String checking results are :{checking_results}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3ru95Np77u7Z",
        "outputId": "c27a01d9-f985-416c-b42f-d2778834201f"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Before change into lower case :CHANDANESH\n",
            "After change into lower case :chandanesh\n",
            "String checking results are :True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"AJANTHA\"\n",
        "name=name.lower()\n",
        "print(f\"After change into lower case :{name}\")\n",
        "results=name.islower()\n",
        "print(f\"Results are :{results} \")\n"
      ],
      "metadata": {
        "id": "EfR2DHIW-mRI",
        "outputId": "f5ae7a49-256c-4e51-bc05-e7e7d107b17f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After change into lower case :ajantha\n",
            "Results are :True \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=\"anantha prasad\"\n",
        "name=name.upper()\n",
        "print(f\"After change into lower case : {name}\")"
      ],
      "metadata": {
        "id": "DCt1hHTx-l-Y",
        "outputId": "180d3907-13d4-48c5-f6bd-a0e2c736fe39",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After change into lower case : ANANTHA PRASAD\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=\"78435\"\n",
        "phone_number.isdigit()"
      ],
      "metadata": {
        "id": "LxrZwNqmL9IS",
        "outputId": "915153c9-9c91-4575-ecfa-a122f9c5668a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=\"78435bng\"\n",
        "phone_number.isdigit()"
      ],
      "metadata": {
        "id": "-1vOWukCMRPj",
        "outputId": "a66ef59c-2363-4fe6-e82f-404c07940305",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 152
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=\"78435bng\"\n",
        "phone_number.startswith(\"9\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qIRnWQpfPCZ3",
        "outputId": "79e8ed0f-c8ba-4b5d-8992-049371ada59f"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=\"7843543210\"\n",
        "phone_number.endswith(\"0\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kw5P7DZ_PSCP",
        "outputId": "81c3b8f7-d7da-4671-8645-67d18ed8d73b"
      },
      "execution_count": 171,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "checking the phone number"
      ],
      "metadata": {
        "id": "Q6p9GbIzRPeZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=input(\"Enter your phone no: \")\n",
        " \n",
        "if phone_number.isdigit() and len(phone_number)==10:\n",
        "  print(\" User input is correct\") \n",
        "else :\n",
        "  print(\"Invalid input\")"
      ],
      "metadata": {
        "id": "hFXZNbIxMRMO",
        "outputId": "fe6fc3aa-5aa5-4c99-ec96-57dcf2561c34",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your phone no: 9876543265\n",
            " User input is correct\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=input(\"Enter your phone no: \")\n",
        " \n",
        "if phone_number.isdigit() and len(phone_number)==10:\n",
        "  print(\" User input is correct\") \n",
        "else :\n",
        "  print(\"Invalid input\")"
      ],
      "metadata": {
        "id": "zd-W47xvNYON",
        "outputId": "301112ec-cc71-4f77-eee0-4b28cc11b6da",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your phone no: 786654434\n",
            "Invalid input\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=input(\"Enter your phone no: \")\n",
        " \n",
        "if phone_number.isdigit() and len(phone_number)==10:\n",
        "  print(\" User input is correct\") \n",
        "else :\n",
        "  print(\"Invalid input\")"
      ],
      "metadata": {
        "id": "9PW2JsUuNYCY",
        "outputId": "d705b0fb-c806-43c8-95bb-b4c1ae529849",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your phone no: 98765432 78\n",
            "Invalid input\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=input(\"Enter your phone no: \")\n",
        " \n",
        "if phone_number.isdigit() and len(phone_number)==10:\n",
        "  print(\" User input is correct\") \n",
        "else :\n",
        "  print(\"Invalid input\")"
      ],
      "metadata": {
        "id": "H6yDYGLtOHZK",
        "outputId": "b6b58ee6-3c1e-4102-f5d9-35a5d8a17314",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your phone no: 0000000000\n",
            " User input is correct\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=input(\"Enter your phone no: \")\n",
        " \n",
        "if phone_number.isdigit() and len(phone_number)==10 and phone_number!=\"0000000000\":\n",
        "  print(\" User input is correct\") \n",
        "else :\n",
        "  print(\"Invalid input\")"
      ],
      "metadata": {
        "id": "p4QHtUc-N0NK",
        "outputId": "838f805c-9172-4c60-8424-9da7937f92cd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your phone no: 0000000000\n",
            "Invalid input\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**checking pan number**"
      ],
      "metadata": {
        "id": "SPB4rL_fT2we"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "PAN_NUMBER=\"AFEYC6576x\"\n",
        "PAN_NUMBER.isalnum() # checking for alpha numeric case"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rw0kloEITYeB",
        "outputId": "5c7f4ca5-bd11-402a-e3ea-6264e5e22e37"
      },
      "execution_count": 178,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 178
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "PAN_NUMBER=\"AFEYC 6576x\"\n",
        "PAN_NUMBER.isalnum() # Because it contains spaces which is not alphabet"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bgKmtuoEUxLD",
        "outputId": "61baa221-fdb2-4048-9072-7f1dbed83f77"
      },
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**REAL CASE 1: CHECKING THE USER INPUT DATA**"
      ],
      "metadata": {
        "id": "BFsSNn8_-N2q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name=input(\"Enter your data : \")\n",
        "print(f\"Before change into lower case : {name}\")\n",
        "\n",
        "checking_results =name.isupper()\n",
        "print(f\"String checking results are : {checking_results}\")\n",
        "if checking_results==True:\n",
        "  print(\"User inputs are perfectly accepting\")\n",
        "else:\n",
        "  print(f\"'User inputs are not accepting 'due to : {checking_results}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HlPkAsc9-U-E",
        "outputId": "4ed753b3-c4df-49a4-9760-324b8d7976ea"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your data : CHANDANESH\n",
            "Before change into lower case : CHANDANESH\n",
            "String checking results are : True\n",
            "User inputs are perfectly accepting\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=input(\"Enter your data : \")\n",
        "print(f\"Before change into lower case : {name}\")\n",
        "\n",
        "checking_results =name.isupper()\n",
        "print(f\"String checking results are : {checking_results}\")\n",
        "if checking_results==True:\n",
        "  print(\"User inputs are perfectly accepting\")\n",
        "else:\n",
        "  print(f\"User inputs are not accepting due to checking result are : {checking_results}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KH9NgBaVAPVA",
        "outputId": "a4d3d645-8acf-4fe6-b6c3-e25a3324c41d"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your data : manjula\n",
            "Before change into lower case : manjula\n",
            "String checking results are : False\n",
            "User inputs are not accepting due to checking result are : False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=input(\"Enter your data : \")\n",
        "print(f\"Before change into lower case :{name}\")\n",
        "\n",
        "checking_results =name.islower()\n",
        "print(f\"String checking results are :{checking_results}\")\n",
        "if checking_results==True:\n",
        "  print(\"User inputs are perfectly accepting\")\n",
        "else:\n",
        "  print(f\"User inputs are not accepting due to :{checking_results}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cqc64S6B7ulJ",
        "outputId": "e7310b3b-4a24-4c6e-e940-b13f41f90c63"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your data : anantha\n",
            "Before change into lower case :anantha\n",
            "String checking results are :True\n",
            "User inputs are perfectly accepting\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=input(\"Enter your data : \")\n",
        "print(f\"Before change into lower case :{name}\")\n",
        "\n",
        "checking_results =name.islower()\n",
        "print(f\"String checking results are :{checking_results}\")\n",
        "if checking_results==True:\n",
        "  print(\"User inputs are perfectly accepting\")\n",
        "else:\n",
        "  print(f\"User inputs are not accepting due to checking results are:{checking_results}\")\n",
        "  \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ltudFlIbAkSg",
        "outputId": "0f3bd7df-7128-4d03-fa6f-660a8142f789"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your data : ANANTHA\n",
            "Before change into lower case :ANANTHA\n",
            "String checking results are :False\n",
            "User inputs are not accepting due to checking results are:False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# case 2 : Auto correcting the user input"
      ],
      "metadata": {
        "id": "FD5UxrIBGtEm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name=input(\"Enter your name: \")\n",
        "\n",
        "print(f\"user input: {name}\")\n",
        "\n",
        "if name.istitle():\n",
        "   print(f\"user has given correct input\")\n",
        "else:\n",
        " print(f\"Wrong input we need to autocorrect it\")\n",
        " name=name.title()\n",
        "print(f\"correct output: {name}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LharXUbPC6gZ",
        "outputId": "5f35803a-65f1-41e6-c809-107668e34ed2"
      },
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your name: sunny\n",
            "user input: sunny\n",
            "Wrong input we need to autocorrect it\n",
            "correct output: Sunny\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=input(\"Enter your name: \")\n",
        "\n",
        "print(f\"user input: {name}\")\n",
        "\n",
        "if name.istitle():\n",
        "   print(f\"user has given correct input\")\n",
        "elif name.isspace():\n",
        "  print(f\"Wrong input please try again!!\")\n",
        "else:\n",
        " print(f\"Wrong input we need to autocorrect it\")\n",
        " name=name.title()\n",
        "print(f\"correct output: {name}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lFETGYCPKg_V",
        "outputId": "a2d449b0-7c4a-4614-b0e1-95b5a6223f64"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your name: SuRYa\n",
            "user input: SuRYa\n",
            "Wrong input we need to autocorrect it\n",
            "correct output: Surya\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name=input(\"Enter your name: \")\n",
        "\n",
        "print(f\"user input: {name}\")\n",
        "\n",
        "if name.istitle():\n",
        "   print(f\"user has given correct input\")\n",
        "elif name.isspace():\n",
        "  print(f\"Wrong input please try again!!\")\n",
        "else:\n",
        " print(f\"Wrong input we need to autocorrect it\")\n",
        " name=name.title()\n",
        "print(f\"correct output: {name}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bkre4U2CLb2H",
        "outputId": "631f0bfd-1b4c-4143-8d13-96d8b5b2bc83"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your name: Surya\n",
            "user input: Surya\n",
            "user has given correct input\n",
            "correct output: Surya\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Case3**:Checking the phone number"
      ],
      "metadata": {
        "id": "3i733_2bQaUP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=input(\"Enter your Indian phone no: \")\n",
        "\n",
        "if phone_number.startswith(\"+91\") and phone_number[1:].isdigit() and len(phone_number)==13:\n",
        "  print(f\"user input is correct\")\n",
        "else :\n",
        "    print(\"invalid input\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wJIAcSxhRUWL",
        "outputId": "209d6768-e9bc-417e-fce9-d8a08e3b0cec"
      },
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your Indian phone no: +918743205678\n",
            "user input is correct\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "phone_number=input(\"Enter your Indian phone no: \")\n",
        "\n",
        "\n",
        "if phone_number.startswith(\"+91\") and phone_number[1:].isdigit() and len(phone_number)==13:\n",
        "  print(f\"user input is correct\")\n",
        "else :\n",
        "    print(\"invalid input\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zq0qgVuxScv0",
        "outputId": "cd715b32-880e-4f58-c82e-3ba97ffa5dfe"
      },
      "execution_count": 175,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your Indian phone no: +938743205678\n",
            "invalid input\n"
          ]
        }
      ]
    }
  ]
}